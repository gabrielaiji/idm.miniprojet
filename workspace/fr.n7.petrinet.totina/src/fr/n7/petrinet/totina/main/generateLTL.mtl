[comment encoding = UTF-8 /]
[module generateLTL('http://simplepdl')]


[template public generateLTL(aProcess : Process)]
[comment @main/]
[file (aProcess.name + '.ltl', false, 'UTF-8')]

[comment chaque activité est soit non commencée, soit en cours, soit terminée/]
[let wds : OrderedSet(WorkDefinition) = aProcess.getWD()]
[for (wd : WorkDefinition | wds)]
['[]'/] ( [wd.name/]_Idle \/[wd.name/]_Running \/ [wd.name/]_Finished );
- ['[]'/] ( [wd.name/]_Idle /\ [wd.name/]_Running );
- ['[]'/] ( [wd.name/]_Idle /\ [wd.name/]_Finished );
- ['[]'/] ( [wd.name/]_Finished /\ [wd.name/]_Running );
['[]'/] ( [wd.name/]_Finished => ['[]'/] [wd.name/]_Finished);
['[]'/] ( [wd.name/]_Running => ['[]'/] [wd.name/]_Started);

[/for]
[/let]

[let wss : OrderedSet(WorkSequence) = aProcess.getWS()]
[for (ws : WorkSequence | wss)]

[if (ws.linkType = WorkSequenceType::startToStart)]
- [ws.predecessor.name/]_Started => [ws.successor.name/]_Idle ;
[/if]
[if (ws.linkType = WorkSequenceType::finishToStart)]
- [ws.predecessor.name/]_Finished => [ws.successor.name/]_Idle ;
[/if]
[if (ws.linkType = WorkSequenceType::startToFinish)]
- [ws.predecessor.name/]_Started => - [ws.successor.name/]_Finished ;
[/if]
[if (ws.linkType = WorkSequenceType::finishToFinish)]
- [ws.predecessor.name/]_Finished => - [ws.successor.name/]_Finished ;
[/if]

[/for]
[/let]

[/file]
[/template]

[query public getWD(p: Process) : OrderedSet(WorkDefinition) =
p.processElements->select( e | e.oclIsTypeOf(WorkDefinition) )
->collect( e | e.oclAsType(WorkDefinition) )
->asOrderedSet()
/]

[query public getWS(p: Process) : OrderedSet(WorkSequence) =
p.processElements->select( e | e.oclIsTypeOf(WorkSequence) )
->collect( e | e.oclAsType(WorkSequence) )
->asOrderedSet()
/]
