module SimplePDL2PetriNet;
create OUT: petrinet from  IN: simplepdl;

-- Obtenir le processus qui contient ce process element.
-- Remarque: Ce helper ne serait pas utile si une r�f�rence opposite
-- avait �t� plac�e entre Process et ProcessElement
helper context simplepdl!ProcessElement
def: getProcess(): simplepdl!Process =
	simplepdl!Process.allInstances()
		->select(p | p.processElements->includes(self))
		->asSequence()->first();

-- Traduire un Process en un Petri de m�me nom
rule Process2Petri {
	from p: simplepdl!Process
	to pn: petrinet!Petri (name <- p.name)
}

-- Traduire une WorkDefinition en un motif sur le r�seau de Petri
rule WorkDefinition2PetriNet {
	from wd: simplepdl!WorkDefinition
	to
		-- PLACES d'une WorkDefinition
		p_ready: petrinet!Place(
				name <- wd.name + '_ready',
				nbTokens <- 1,
				net <- wd.getProcess()),
		
		p_started: petrinet!Place(
				name <- wd.name + '_started',
				nbTokens <- 0,
				net <- wd.getProcess()),
				
		p_running: petrinet!Place(
				name <- wd.name + '_running',
				nbTokens <- 0,
				net <- wd.getProcess()),
				
		p_finished: petrinet!Place(
				name <- wd.name + '_finished',
				nbTokens <- 0,
				net <- wd.getProcess()),
				
		-- TRANSITIONS d'une WorkDefinition
		p_start: petrinet!Transition(
				name <- wd.name + '_start',
				net <- wd.getProcess()),
				
		p_finish: petrinet!Transition(
				name <- wd.name + '_finish',
				net <- wd.getProcess()),
				
		-- ARCS d'une WorkDefinition
		p_ready2start: petrinet!Arc(
				arcType <- #normalArc,
				net <- wd.getProcess(),
				source <- p_ready,
				target <- p_start,
				weight <- 1),
				
		p_start2started: petrinet!Arc(
				arcType <- #normalArc,
				net <- wd.getProcess(),
				source <- p_start,
				target <- p_started,
				weight <- 1),
				
		p_start2running: petrinet!Arc(
				arcType <- #normalArc,
				net <- wd.getProcess(),
				source <- p_start,
				target <- p_running,
				weight <- 1),
				
		p_running2finish: petrinet!Arc(
				arcType <- #normalArc,
				net <- wd.getProcess(),
				source <- p_running,
				target <- p_finish,
				weight <- 1),
				
		p_finish2finished: petrinet!Arc(
				arcType <- #normalArc,
				net <- wd.getProcess(),
				source <- p_finish,
				target <- p_finished,
				weight <- 1)

}
